name: Terraform CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      

      - name: Azure Login
        run: |
          az login --service-principal --username ${{ secrets.AZURE_CLIENT_ID }} --password ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
  
      - name: Terraform Init
        run: |
          terraform init

      - name: Terraform Format
        run: |
          terraform fmt -check=true
        continue-on-error: true

      - name: Terraform Validate
        run: |
          terraform validate

      - name: Check State Lock
        id: check_lock
        run: |
            if [[ -f "tf.lock" ]]; then
              lock_id=$(terraform state lock-info -state=tf.lock | awk '/ID:/{print $2}')
              echo "::set-output name=lock_id::${lock_id}"
            else
              echo "::set-output name=lock_id::"
            fi
        continue-on-error: true
  
      - name: Unlock State
        if: steps.check_lock.outputs.lock_id != ''
        run: |
            terraform force-unlock -force ${{ steps.check_lock.outputs.lock_id }}
        continue-on-error: true

      - name: Remove Terraform State Lock
        run: |
              lock_info=$(az storage blob show --container-name <tests> --name <terraform.tfstate>.lock --account-name <daniiltests> --account-key ${{ secrets.STORAGE_ACCOUNT_NAME }} --query properties.lease.state -o tsv)
              if [[ $lock_info == "leased" ]]; then
                az storage blob lease break --container-name <tests> --name <terraform.tfstate>.lock --account-name <daniiltests> --account-key ${{ secrets.STORAGE_ACCOUNT_NAME }}
              else
                echo "No state lock found. Skipping removal."
              fi
        continue-on-error: true

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: |
          terraform plan -var "AZURE_CLIENT_ID=${{ env.ARM_CLIENT_ID }}" \
            -var "AZURE_CLIENT_SECRET=${{ env.ARM_CLIENT_SECRET }}" \
            -var "AZURE_SUBSCRIPTION_ID=${{ env.ARM_SUBSCRIPTION_ID }}" \
            -var "AZURE_TENANT_ID=${{ env.ARM_TENANT_ID }}"

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          terraform apply --auto-approve \
            -var "AZURE_CLIENT_ID=${{ env.ARM_CLIENT_ID }}" \
            -var "AZURE_CLIENT_SECRET=${{ env.ARM_CLIENT_SECRET }}" \
            -var "AZURE_SUBSCRIPTION_ID=${{ env.ARM_SUBSCRIPTION_ID }}" \
            -var "AZURE_TENANT_ID=${{ env.ARM_TENANT_ID }}"